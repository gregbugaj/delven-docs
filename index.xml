<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to Delven on Delven Documentation</title>
    <link>/</link>
    <description>Recent content in Welcome to Delven on Delven Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API Endpoint</title>
      <link>/api-reference/api-endpoints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/api-endpoints/</guid>
      <description>Endpoint
https://api.delven.io/v1/script/execute?token=secrettoken&amp;amp;tag=myscript
The API URLs contain an authentication token and therefore should not be shared.</description>
    </item>
    
    <item>
      <title>Attributes</title>
      <link>/event-flow/element-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/event-flow/element-attributes/</guid>
      <description>Interacting with Element Attributes
Parameter Specification    Name Spec Data Types Description     attribute optional Object of Key:Value Set attribute value    Example &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;info&amp;#34; value=&amp;#34;&amp;#34; data-a=&amp;#34;Value A&amp;#34; data-b=&amp;#34;Value B&amp;#34;&amp;gt; Setting Attribute Values SELECT css(&amp;#34;#info[data-a]&amp;#34;) as aval, css(&amp;#34;#info[data-b]&amp;#34;) as bval FROM http://www.delven.io/test/execute.html EVENTFLOW [ { &amp;#34;by-css&amp;#34;: &amp;#34;#info&amp;#34;, &amp;#34;attribute&amp;#34;: { &amp;#34;data-a&amp;#34;: &amp;#34;New Value A&amp;#34;, &amp;#34;data-b&amp;#34;: &amp;#34;New Value B&amp;#34; } } ] Results { &amp;#34;aval&amp;#34;: { &amp;#34;value&amp;#34;: &amp;#34;New Value A&amp;#34; }, &amp;#34;bval&amp;#34;: { &amp;#34;value&amp;#34;: &amp;#34;New Value B&amp;#34; } } </description>
    </item>
    
    <item>
      <title>Building</title>
      <link>/meta/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/meta/building/</guid>
      <description>CEF Detailed instructions
https://bitbucket.org/chromiumembedded/cef/wiki/BranchesAndBuilding.md
Looks like the archvie is broken as it point to the new build. https://developer.microsoft.com/en-us/windows/downloads/sdk-archive
Here is direct link to the download Download Windows 10 SDK 10.0.14393.33 http://download.microsoft.com/download/6/3/B/63BADCE0-F2E6-44BD-B2F9-60F5F073038E/standalonesdk/sdksetup.exe
Download Windows 10 SDK 10.0.14393.33 http://download.microsoft.com/download/6/3/B/63BADCE0-F2E6-44BD-B2F9-60F5F073038E/standalonesdk/sdksetup.exe
Building dependenceis https://bitbucket.org/chromiumembedded/cef/wiki/MasterBuildQuickStart#markdown-header-linux-setup
https://groups.google.com/a/chromium.org/forum/#!topic/chromium-dev/LHbKDRITc2A%5B1-25%5D &#39;&#39;&#39; DEPOT_TOOLS_WIN_TOOLCHAIN = 0 &#39;&#39;&#39;
https://msdn.microsoft.com/en-us/library/windows/desktop/aa385638(v=vs.85).aspx
&#39;&#39;&#39;
[9/27741] ACTION //base/win:eventlog_messages(//build/toolchain/win:x86) FAILED: gen/base/win/eventlog_messages.h gen/base/win/eventlog_messages.rc C:/code/depot_tools/python276_bin/python.exe ../../build/win/message_compiler.py environment.x86 -h gen/base/win -r gen/base/win -u ../../base/win/eventlog_messages.mc &amp;lsquo;mc.exe&amp;rsquo; is not recognized as an internal or external command, operable program or batch file.</description>
    </item>
    
    <item>
      <title>Buttons</title>
      <link>/event-flow/buttons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/event-flow/buttons/</guid>
      <description>Interacting with Buttons
Parameter Specification    Name Spec Data Types Description     value required [String] Set value   event required [String] Invoke event    &amp;#34;event[1]&amp;#34; : &amp;#34;click&amp;#34; ] Example &amp;lt;button type=&amp;#34;button&amp;#34; id=&amp;#34;btn&amp;#34;&amp;gt;Click Me!&amp;lt;/button&amp;gt; Setting Value SELECT css(&amp;#34;#btn&amp;#34;) FROM http://www.delven.io/test/execute.html EVENTFLOW [ { &amp;#34;by-css&amp;#34;: &amp;#34;#btn&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;New Button Name&amp;#34; } ] { &amp;#34;column_1&amp;#34; : {&amp;#34;value&amp;#34; : &amp;#34;New Button Name&amp;#34;} } Invoking Click Event Following example will select our button and then perform an click action.</description>
    </item>
    
    <item>
      <title>Capture</title>
      <link>/api-reference/capture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/capture/</guid>
      <description>Capture API</description>
    </item>
    
    <item>
      <title>Comparison Operators</title>
      <link>/language-elements/comparsion-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/language-elements/comparsion-operators/</guid>
      <description>Comparison operators are used in the WHERE clause to determine which records to select.
   Comparison Operator Description     = Equal   &amp;lt;&amp;gt; Not Equal   != Not Equal   &amp;gt; Greater Than   &amp;gt;= Greater Than or Equal   &amp;lt; Less Than   &amp;lt;= Less Than or Equal   IN Matches a value in a list   NOT Negates a condition   BETWEEN Within a range (inclusive)   EXISTS Condition is met if subquery returns at least one row    [//]: # https://www.</description>
    </item>
    
    <item>
      <title>Cookies</title>
      <link>/api-reference/cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/cookies/</guid>
      <description>Cookies API mozilla
The cookie module provides utilities for working with cookies.
To use this module:
const cookies = require(&#39;cookies&#39;); cookie.getAll(details)  details &amp;lt;object&amp;gt; An object containing details that can be used to match cookies to be retrieved  name &amp;lt;string&amp;gt; A string representing a name that the cookies should have. path &amp;lt;string&amp;gt; A string representing a path â€” the cookies&#39; path must be identical to this one.   Returns: &amp;lt;object&amp;gt; array of cookie objects  Retrieves all cookies from a cookie store that match the given information.</description>
    </item>
    
    <item>
      <title>CRAWL</title>
      <link>/syntax/crawl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/crawl/</guid>
      <description>Delven can move automatically from one page to another. This behavior, called crawling, is enabled using the following syntax:
Specification    Name Spec Data Types Default Description     depth optional [Number] 2 How deep will the link be followed   follow optional [String] All links Selector to follow   using optional [Object] N/A USING clause    CRAWL { &amp;#34;depth&amp;#34; : 2, &amp;#34;follow&amp;#34; : css(&amp;#34;#comments a&amp;#34;) } Basic usage This query retrieves data by crawling three layers deep within a web site:</description>
    </item>
    
    <item>
      <title>Crawling</title>
      <link>/getting-started/crawling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/crawling/</guid>
      <description>Crawling data is awesome</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>/syntax/datatypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/datatypes/</guid>
      <description>Data types used
URL { http://www.delven.io } String { &amp;#34;key&amp;#34; : &amp;#34;String Value&amp;#34; } Numeric { &amp;#34;key&amp;#34; : 12345 } Boolean { &amp;#34;key&amp;#34; : true | false } Object of Key:Value { &amp;#34;params&amp;#34; : { &amp;#34;p1&amp;#34;: &amp;#34;valueA&amp;#34;, &amp;#34;p2&amp;#34;: &amp;#34;valueB&amp;#34;, } } Array of Strings { &amp;#34;headers&amp;#34;: [ &amp;#34;Accept: application/xml&amp;#34;, &amp;#34;Content-Type: application/xml&amp;#34; ] } </description>
    </item>
    
    <item>
      <title>Debuging Delven(CEF)</title>
      <link>/meta/debuging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/meta/debuging/</guid>
      <description>Debuging Delven(CEF)
Delven engine is build with Chromium Embedded Framework (CEF), which is a framework for embedding Chromium-based browsers in other applications. You can take advantage of the Chrome Developer Tools to debug your scripts.
Remote debugging is enabled on port 9222, allowing CEF to be debugged from any CEF or Chrome browser window. To access the CEF remotely, go to the localhost URL oriented to the debugging port number: http://localhost:9222</description>
    </item>
    
    <item>
      <title>Dropdown</title>
      <link>/event-flow/dropdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/event-flow/dropdown/</guid>
      <description>Interacting with Dropdowns
Selection Types A. Selecting Dropdown Values    Name Spec Data Types Description     selectByIndex optional [Number] Select Option by Index   selectByValue optional [String] Select Option by Option Value   selectByText optional [String] Select Value by Option Text    Example &amp;lt;select id=&amp;#34;vehicles&amp;#34;&amp;gt; &amp;lt;option value=&amp;#34;opt-volvo&amp;#34;&amp;gt;Volvo&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;opt-saab&amp;#34;&amp;gt;Saab&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;opt-vw&amp;#34;&amp;gt;VW&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;#34;opt-audi&amp;#34;&amp;gt;Audi&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; Select Option by Index SELECT css(&amp;#34;#vehicles option:selected&amp;#34;) FROM http://www.</description>
    </item>
    
    <item>
      <title>Element Selection</title>
      <link>/event-flow/element-selection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/event-flow/element-selection/</guid>
      <description>How to use Selector in Delven
Selectors tell Delven which DOMElements we will be operating on. Selectors used for for DOM manipulation are similar to selectors used for data selector in SELECT clause.
Selector types    Name Spec Data Types Description     by-css required [String] Select using CSS   by-name required [String] Select using element name   by-xpath required [String] Select using XPath   by-regex required [String] Select using regular expressions    Requirement [ { &amp;#34;by-XXXXX&amp;#34; : &amp;#34;SELECTOR&amp;#34;, &amp;#34;filter&amp;#34; : &amp;#34;&amp;#34; } ] Examples For concreate example for specific types visit.</description>
    </item>
    
    <item>
      <title>Event Handling</title>
      <link>/event-flow/event-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/event-flow/event-handling/</guid>
      <description>Event Handling
Mouse Events    Event Name Fired When     click A pointing device button has been pressed and released on an element.   mouseover A pointing device is moved onto the element that has the listener attached or onto one of its children.    Events use a special syntax &amp;quot;event[ID]&amp;quot; : &amp;quot;EVENTNAME&amp;quot; this allows us to specify multiple events in more compact way when multiple events are required on an object to be invoked.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>/api-reference/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/events/</guid>
      <description>Events API</description>
    </item>
    
    <item>
      <title>File System</title>
      <link>/api-reference/file-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/file-system/</guid>
      <description>The fs module provides an API for interacting with the file system in a manner closely modeled around standard POSIX functions.
Goal of this inerface is to be compatible with Node.js File System API
Compatibility objective : 80%
To use this module:
const fs = require(&#39;fs&#39;); All file system operations have synchronous and asynchronous forms.
fs.readFile(path) Compatibility : broken
Open, read and return text content of a file. It will throw an exception if it fails.</description>
    </item>
    
    <item>
      <title>Form submission</title>
      <link>/getting-started/form-submission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/form-submission/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Forms</title>
      <link>/api-reference/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/forms/</guid>
      <description>Forms API</description>
    </item>
    
    <item>
      <title>FROM</title>
      <link>/syntax/from/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/from/</guid>
      <description>The FROM clause is used to specifyg source and any joined sources.
Syntax FROM &amp;lt;from_specification&amp;gt; &amp;lt;from_specification&amp;gt; ::= &amp;lt;from_source&amp;gt; {[ JOIN &amp;lt;from_source&amp;gt;][,...n]} &amp;lt;from_source&amp;gt; ::= &amp;lt;collection_expression&amp;gt; [[AS] input_alias] | input_alias IN &amp;lt;collection_expression&amp;gt; &amp;lt;collection_expression&amp;gt; ::= ROOT | collection_name | input_alias | &amp;lt;collection_expression&amp;gt; &#39;.&#39; property_name | &amp;lt;collection_expression&amp;gt; &#39;[&#39; &amp;quot;property_name&amp;quot; | array_index &#39;]&#39; Arguments &amp;lt;from_source&amp;gt;
Specifies a data source, with or without an alias. If alias is not specified, it will be inferred from the &amp;lt;collection_expression&amp;gt; using following rules:</description>
    </item>
    
    <item>
      <title>Implicit Conversion</title>
      <link>/language-elements/coversions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/language-elements/coversions/</guid>
      <description>Delven does implicit conversions for complex types.
What this means is that when we use a selector such as css(&#39;a&#39;) we are actually selecting a HTMLElement not the value associated with the elements, so in order to get the value we follow some rules to do that.
Implicit conversion is ENABLED by default, to disable it we can use the OPTIONS clause.
SELECT css(&amp;#34;#id1&amp;#34;) FROM http://www.delven.io/test/index-01.html OPTIONS { &amp;#34;implicit-conversion&amp;#34; : false } When conversion is ENABLED following two selectors are equivalent.</description>
    </item>
    
    <item>
      <title>INSERT</title>
      <link>/syntax/insert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/insert/</guid>
      <description>Delven uses a simple syntax to store results. The INTO clause always comes after the SELECT statement. Extraction results are stored in collections, collection is a container for a JSON documents.
Syntax Examples Inserting This is minimalistic example of our INSERT clause.
SELECT css(&amp;#34;#header&amp;#34;), css(&amp;#34;#title&amp;#34;) FROM http://www.delven.io/test/index-01.html INSERT HeaderCollection This will result in a document to be inserted into a HeaderCollection for each of the returned matches. So if there were two #header id in the page we will have two documents inserted.</description>
    </item>
    
    <item>
      <title>Intercepting Request</title>
      <link>/api-reference/request/intercepting-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/request/intercepting-requests/</guid>
      <description>Events Event resource requested The &amp;lsquo;resource.requested&amp;rsquo; event is emitted when a request is started.
   Name Spec Data Types Description     request Request Reference to the request object    const request = require(&#39;request&#39;).create(); request.on(&#39;resource.requested&#39;, (request) =&amp;gt; { console.info(&amp;quot;Sending request&amp;quot;); }); request.start(&#39;http://www.google.com&#39;).then(() =&amp;gt; { console.info(&amp;quot;Page load complete **&amp;quot;); }); request.run(); Event resource received The &amp;lsquo;resource.received&amp;rsquo; event is emitted when a request is received from the source.</description>
    </item>
    
    <item>
      <title>JavaScript Execution</title>
      <link>/event-flow/executing-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/event-flow/executing-javascript/</guid>
      <description>Executing script on loaded document
Arguments Examples A. Execute JavaScript function SELECT * FROM http://www.delven.io/test/execute.html EVENTFLOW { &amp;#34;execute&amp;#34; : [&amp;#34;window.scrollTo(0, 0)&amp;#34;, &amp;#34;document.write(&amp;#39;Hello World&amp;#39;)&amp;#34;] } A. Execute JavaScript on [DOMElement] (https://developer.mozilla.org/en-US/docs/Web/API/Element) Before a funtion can be executed a DOMElement first need to be located
SELECT css(&amp;#34;#btn&amp;#34;) FROM http://www.delven.io/test/execute.html EVENTFLOW [ { &amp;#34;by-css&amp;#34; : &amp;#34;#btn&amp;#34;, &amp;#34;execute&amp;#34; : [&amp;#34;$.click()&amp;#34;] } ] Full JavaScript support : ECMAScript 6 Delven allows for low lever interaction with documents via JavaScript(ECMAScript 6+) scripts.</description>
    </item>
    
    <item>
      <title>JOIN</title>
      <link>/syntax/join/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/join/</guid>
      <description>While you can create basic queries using one select segment, joining select statements together allows you to create more complex queries.
A join clause take two soures as inputs. All joins are equijoins and all oprations are &amp;lsquo;AND&amp;rsquo; operations.
Types of supported joins.
 Inner join Left outer join Group join  Syntax Inner join Inner join produces a result set in which each element of the first collection appears one time for every matching element in the second collection.</description>
    </item>
    
    <item>
      <title>Joining data</title>
      <link>/getting-started/joining/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/joining/</guid>
      <description>While you can create basic queries using one select segment, joining select statements together allows you to create more complex queries.</description>
    </item>
    
    <item>
      <title>Keyboard Events</title>
      <link>/api-reference/keyboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/keyboard/</guid>
      <description>Keyboard Events API</description>
    </item>
    
    <item>
      <title>Keypress Events</title>
      <link>/event-flow/keypress-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/event-flow/keypress-events/</guid>
      <description>[//] (http://www.testingdiaries.com/selenium-ide-keypress-events/) [//] (http://www.testingdiaries.com/selenium-ide-keypress-events/)
Simulating Keypress Events
Arguments Below is an exhaustive list of supported keyboard commands.
Navigation Keys  KEY_LEFT (Navigation Left) KEY_UP (Navigation Up) KEY_RIGHT (Navigation Right) KEY_DOWN (Navigation Down) KEY_PGUP / KEY_PAGE_UP (Page up) KEY_PGDN / KEY_PAGE_DOWN (Page down) KEY_END (End) KEY_HOME (Home)  Function Keys  KEY_F1 to KEY_12 (Function keys from F1 to F12)  Modifier Keys  KEY_ALT (Alt) KEY_CONTROL / KEY_CTRL (Ctrl) KEY_META / KEY_COMMAND (Command) KEY_SHIFT (Shift)  Num Pad Keys  KEY_NUMPAD0 / KEY_N0 to KEY_NUMPAD9 / KEY_N9 (Number keys from 1 to 9) KEY_ADD / KEY_NUM_PLUS (Plus) KEY_DECIMAL/ KEY_NUM_PERIOD (Period) KEY_DIVIDE/ KEY_NUM_DIVISION (Division) KEY_MULTIPLY/ KEY_NUM_MULTIPLY (Multiply) KEY_SEPARATOR/ KEY_SEP (Separator) KEY_SUBTRACT/ KEY_NUM_MINUS (Minus)  Misc.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>/meta/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/meta/license/</guid>
      <description>License info</description>
    </item>
    
    <item>
      <title>Mouse Events</title>
      <link>/api-reference/mouse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/mouse/</guid>
      <description>Mouse Events API</description>
    </item>
    
    <item>
      <title>NATIVE</title>
      <link>/syntax/native/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/native/</guid>
      <description>NATIVE clause allows us to execute Javascript directly on the loaded document
See JavaScript Execution for details and examples
Syntax NATIVE &amp;#34;script.js&amp;#34; Usage SELECT css(&amp;#34;#id1&amp;#34;) FROM http://www.delven.io/test/index-01.html NATIVE &amp;#34;script.js&amp;#34; </description>
    </item>
    
    <item>
      <title>OPTIONS</title>
      <link>/syntax/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/options/</guid>
      <description>Certain options are Enabled/Disabled by default and they can be controlled with OPTIONS clause.
Syntax OPTIONS { &amp;#34;OptionName1&amp;#34; : &amp;#34;Value&amp;#34;, &amp;#34;OptionName2&amp;#34; : &amp;#34;Value&amp;#34; } Specification    Name Spec Data Types Value Default Description     implicit-conversion [Boolean] true,false True Automatic type conversion    Usage SELECT css(&amp;#34;#id1&amp;#34;) FROM http://www.delven.io/test/index-01.html OPTIONS { &amp;#34;implicit-conversion&amp;#34; : false } </description>
    </item>
    
    <item>
      <title>Path</title>
      <link>/api-reference/path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/path/</guid>
      <description>The path module provides utilities for working with file and directory paths.
Goal of this inerface is to be compatible with Node.js Path API
Compatibility objective : 100%
To use this module:
const path = require(&#39;path&#39;); path.extension(path)  path &amp;lt;string&amp;gt; Path of the file to check Returns: &amp;lt;string&amp;gt; extension  Get the the extension of the path, from the last occurrence of the .
path.extname(path) Alias for path.extension(path)
path.dirname(path)  path &amp;lt;string&amp;gt; Path of the file to check Returns: &amp;lt;string&amp;gt; directory name  Get the directory name of a path, similar to the Unix dirname command.</description>
    </item>
    
    <item>
      <title>Pipeline</title>
      <link>/api-reference/pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/pipeline/</guid>
      <description>Piepline API</description>
    </item>
    
    <item>
      <title>Pseudocolumns</title>
      <link>/language-elements/pseudocolumns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/language-elements/pseudocolumns/</guid>
      <description>In addition to columns provided by input objects, Delven provides pseudocolumns, which expressions can also reference. Some pseudocolumns are only available to expressions in certain contexts. Others are generally available to any expression.
Specification    Name Description     PS.FETCH_ID The sequential ID of the current fetch. This ID is global across the entire query.   PS.REQUEST_URL The URL initially visited to load the document, prior to any redirection    </description>
    </item>
    
    <item>
      <title>References</title>
      <link>/meta/references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/meta/references/</guid>
      <description>This software could not be possible without inspirations from my family and friends.
Technical references If you see something similar it is probably because it have been inspired by one of the following.
  [Selectors | jQuery API Documentation] (https://api.jquery.com/category/selectors/)
  [DocumentDB SQL Syntax] (https://msdn.microsoft.com/library/azure/dn782250.aspx)
  [https://msdn.microsoft.com/en-us/library/bb311040.aspx] (https://msdn.microsoft.com/en-us/library/bb311040.aspx)
  [https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/] (https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/)
  [Column name qualifiers to avoid ambiguity] (https://www.ibm.com/support/knowledgecenter/en/SSEPEK_11.0.0/sqlref/src/tpc/db2z_colnames2avoidambiguity.html)
  [https://github.com/antlr/grammars-v4/blob/master/json/JSON.g4] (https://github.com/antlr/grammars-v4/blob/master/json/JSON.g4)
  [The Node.</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>/meta/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/meta/release-notes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Request API</title>
      <link>/api-reference/request/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/request/api/</guid>
      <description>request.create request.createStep(fn, options) Creates a step definition
   Name Spec Data Types Description     fn function The step function to call   options object Step options    timeout Timeout period before request is considered dead (default:none)    waitTimeout Wait timeout between requests (default:5000)    request.then(step, options) Add processing step to current navigation. Calling this method after the run have started will result in the step being inserted as next one in the queue</description>
    </item>
    
    <item>
      <title>Request Pipeline</title>
      <link>/api-reference/request/pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/request/pipeline/</guid>
      <description>Request Pipeline Pipelines allow for chaing requests
const request = require(&#39;request&#39;).create(); const onRequestSent = function(request) { console.info(&amp;quot;Sending request : %s&amp;quot;, request); } const onRequestReceived = function (request, response) { console.info(&amp;quot;Receiving request &amp;quot;); } request.on(&#39;resource.requested&#39;, onRequestSent); request.on(&#39;resource.received&#39;, onRequestReceived); request.start().next(() =&amp;gt; { console.info(&amp;quot;Start **&amp;quot;); this.open(&#39;https://www.google.com/&#39;).next(() =&amp;gt; { // Evaluate function in the context of the loaded page this.evaluate(function () { console.info(&amp;quot;Document Title&amp;quot;); }); }); }); request.run(); </description>
    </item>
    
    <item>
      <title>Retrieving videos</title>
      <link>/getting-started/retrieving-videos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/retrieving-videos/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>/meta/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/meta/roadmap/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SELECT</title>
      <link>/syntax/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/select/</guid>
      <description>Selector Functions    Name Spec Data Types Value Description     css requied [String, Object] CSS Selector GET, POST, PUT, HEAD, OPTIONS, DELETE   xpath requied [String] XPath 2 Name of the form to target   regex requied [String] Regex (Java) Parameters to pass   headers optional [Array of Strings]  Headers to pass to the request   cookies optional [Array of Strings]  Cookies to pass to the request   response optional [Array of Strings]  Cookies to pass to the request   snapshot optional [Object]  Generates a graphical snapshot of a web page&amp;rsquo;s / selected content    Selectors support two types of of parameters Implicit and Explicit.</description>
    </item>
    
    <item>
      <title>Storage</title>
      <link>/api-reference/storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/storage/</guid>
      <description>Storage API</description>
    </item>
    
    <item>
      <title>Storing data</title>
      <link>/getting-started/storing-results/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/storing-results/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SUBQUERIES</title>
      <link>/syntax/subquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/subquery/</guid>
      <description>A subquery is a SELECT statement written within parentheses and nested inside another statement.
Subqueries can return different types of information:
 A scalar subquery returns a single value. A column subquery returns a single column of one or more values. A row subquery returns a single row of one or more values. A table subquery returns a table of one or more rows of one or more columns.  Subquery results can be tested in different ways:</description>
    </item>
    
    <item>
      <title>Table designators</title>
      <link>/language-elements/table-designators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/language-elements/table-designators/</guid>
      <description>A qualifier that designates a specific object table is called a table designator. The clause that identifies the object tables also establishes the table designators for them.
Column name qualifiers to avoid ambiguity One reason for qualifying a column name is to designate the object from which the column comes.
Table designators: A qualifier that designates a specific object table is called a table designator. The clause that identifies the object tables also establishes the table designators for them.</description>
    </item>
    
    <item>
      <title>Textbox</title>
      <link>/event-flow/textbox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/event-flow/textbox/</guid>
      <description>Interacting with Texboxes
Parameter Specification    Name Spec Data Types Description     value optional [String] Set value    Example &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;firstname&amp;#34; value=&amp;#34;&amp;#34;&amp;gt; Setting Values Setting single value SELECT css(&amp;#34;#firstname&amp;#34;) FROM http://www.delven.io/test/execute.html EVENTFLOW [ { &amp;#34;by-css&amp;#34;: &amp;#34;#firstname&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;Greg&amp;#34; } ] { &amp;#34;column_1&amp;#34; : {&amp;#34;value&amp;#34; : &amp;#34;Greg&amp;#34;} } Setting multiple values SELECT css(&amp;#34;#firstname&amp;#34;) as first , css(&amp;#34;#lastname&amp;#34;) as last FROM http://www.delven.io/test/execute.html EVENTFLOW [ { &amp;#34;by-css&amp;#34;: &amp;#34;#firstname&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;Greg&amp;#34; }, { &amp;#34;by-css&amp;#34;: &amp;#34;#lastname&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;B.</description>
    </item>
    
    <item>
      <title>USING</title>
      <link>/syntax/using/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/using/</guid>
      <description>Specifies the condition used to retieve the URL. USING clause used JSON like format for specifying the clause.
Specification    Name Spec Data Types Value Default Description     method optional [String] HTTP Verb GET GET, POST, PUT, HEAD, OPTIONS, DELETE   form optional [String] Form Name main Name of the form to target   params optional [Object of Key:Value]   Parameters to pass   headers optional [Array of Strings]   Headers to pass to the request   cookies optional [Array of Strings]   Cookies to pass to the request    Parameter structure { &amp;#34;method&amp;#34; : &amp;#34;POST&amp;#34;, &amp;#34;form&amp;#34; : &amp;#34;main&amp;#34;, &amp;#34;params&amp;#34; : { &amp;#34;p1&amp;#34;: &amp;#34;valueA&amp;#34;, &amp;#34;p2&amp;#34;: &amp;#34;valueB&amp;#34;, }, &amp;#34;headers&amp;#34; : [&amp;#34;Accept: application/xml&amp;#34;, &amp;#34;Content-Type: application/xml&amp;#34;], &amp;#34;cookies&amp;#34; : [&amp;#34;token=1212&amp;#34;, &amp;#34;another=value&amp;#34;] } Examples A.</description>
    </item>
    
    <item>
      <title>WATCH</title>
      <link>/syntax/watch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/watch/</guid>
      <description>WATCH clause allows us to monitor changes to the underlying content.
   Name Spec Data Types Default Description     selector required Object|Function  Selector to use for watches   interval optional [String] 12:00:00 Interval of how ofter to check for updates   time optional [String] 12:00:00 Time of day of when to check for update   method optional [String] value Watch Type    Usage The following example setups a WATCH to be executed every 30 seconds.</description>
    </item>
    
    <item>
      <title>WHERE</title>
      <link>/syntax/where/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/where/</guid>
      <description>Specifies the search condition for the rows returned by the query.
 Projection means choosing which columns (or expressions) the query will return. Selection means which rows are to be returned.  Arguments SELECT css(&amp;#34;.title&amp;#34;) as title FROM http://www.delven.io/test/index-01.html WHERE css(&amp;#34;.content-container .title&amp;#34;) SELECT css(&amp;#39;#title&amp;#39;) as title FROM http://www.delven.io/test/index-01.html WITHIN css(&amp;#34;.content-container&amp;#34;) WHERE css(&amp;#34;.content-container .title&amp;#34;) LIKE (&amp;#39;Test 1&amp;#39;, &amp;#39;Test 2&amp;#39;) SELECT css(&amp;#34;.title&amp;#34;) as title FROM http://www.delven.io/test/index-01.html WHERE css(&amp;#34;.content-container .title&amp;#34;) LIKE (&amp;#39;Test 1&amp;#39;, &amp;#39;Test 2&amp;#39;) SELECT css(&amp;#34;h1&amp;#34;) as header FROM http://www.</description>
    </item>
    
    <item>
      <title>WITH</title>
      <link>/syntax/with/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/with/</guid>
      <description>Common Table Expressions
A common table expression (CTE) can be thought of as a temporary result set that is defined within the execution scope of a single SELECT. CTE can be self-referencing and can be referenced multiple times in the same query.
Arguments expression_name Is a valid identifier for the common table expression. expression_name must be different from the name of any other common table expression defined in the same WITH clause</description>
    </item>
    
    <item>
      <title>WITHIN</title>
      <link>/syntax/within/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/syntax/within/</guid>
      <description>WITHIN clause is used to narrow results down
Basic usage SELECT css(&amp;#39;#title&amp;#39;) as title WITHIN css(&amp;#34;.content-container&amp;#34;) FROM http://www.delven.io/test/index-01.html Multiple filters SELECT css(&amp;#39;#title&amp;#39;) as title WITHIN [css(&amp;#34;.content-container-a&amp;#34;), css(&amp;#34;.content-container-b&amp;#34;)] FROM http://www.delven.io/test/index-01.html SELECT css(&amp;#39;#title&amp;#39;) as title WITHIN [css(&amp;#34;.content-container-a&amp;#34;), css(&amp;#34;.content-container-b&amp;#34;)] FROM http://www.delven.io/test/index-01.html WHERE css(&amp;#34;.content-container-a .title&amp;#34;) LIKE (&amp;#39;Test 1&amp;#39;, &amp;#39;Test 2&amp;#39;) OR css(&amp;#34;.content-container-b .title&amp;#34;) LIKE (&amp;#39;Test 3&amp;#39;, &amp;#39;Test 4&amp;#39;) </description>
    </item>
    
  </channel>
</rss>
