<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Delven Documentation</title>
    <link>/tags/javascript/</link>
    <description>Recent content in javascript on Delven Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Element Selection</title>
      <link>/event-flow/element-selection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/event-flow/element-selection/</guid>
      <description>How to use Selector in Delven
Selectors tell Delven which DOMElements we will be operating on. Selectors used for for DOM manipulation are similar to selectors used for data selector in SELECT clause.
Selector types    Name Spec Data Types Description     by-css required [String] Select using CSS   by-name required [String] Select using element name   by-xpath required [String] Select using XPath   by-regex required [String] Select using regular expressions    Requirement [ { &amp;#34;by-XXXXX&amp;#34; : &amp;#34;SELECTOR&amp;#34;, &amp;#34;filter&amp;#34; : &amp;#34;&amp;#34; } ] Examples For concreate example for specific types visit.</description>
    </item>
    
    <item>
      <title>EVENTFLOW</title>
      <link>/event-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/event-flow/</guid>
      <description>EVENTFLOW Reference</description>
    </item>
    
    <item>
      <title>File System</title>
      <link>/api-reference/file-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/file-system/</guid>
      <description>The fs module provides an API for interacting with the file system in a manner closely modeled around standard POSIX functions.
Goal of this inerface is to be compatible with Node.js File System API
Compatibility objective : 80%
To use this module:
const fs = require(&#39;fs&#39;); All file system operations have synchronous and asynchronous forms.
fs.readFile(path) Compatibility : broken
Open, read and return text content of a file. It will throw an exception if it fails.</description>
    </item>
    
    <item>
      <title>Intercepting Request</title>
      <link>/api-reference/request/intercepting-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/request/intercepting-requests/</guid>
      <description>Events Event resource requested The &amp;lsquo;resource.requested&amp;rsquo; event is emitted when a request is started.
   Name Spec Data Types Description     request Request Reference to the request object    const request = require(&#39;request&#39;).create(); request.on(&#39;resource.requested&#39;, (request) =&amp;gt; { console.info(&amp;quot;Sending request&amp;quot;); }); request.start(&#39;http://www.google.com&#39;).then(() =&amp;gt; { console.info(&amp;quot;Page load complete **&amp;quot;); }); request.run(); Event resource received The &amp;lsquo;resource.received&amp;rsquo; event is emitted when a request is received from the source.</description>
    </item>
    
    <item>
      <title>JavaScript Execution</title>
      <link>/event-flow/executing-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/event-flow/executing-javascript/</guid>
      <description>Executing script on loaded document
Arguments Examples A. Execute JavaScript function SELECT * FROM http://www.delven.io/test/execute.html EVENTFLOW { &amp;#34;execute&amp;#34; : [&amp;#34;window.scrollTo(0, 0)&amp;#34;, &amp;#34;document.write(&amp;#39;Hello World&amp;#39;)&amp;#34;] } A. Execute JavaScript on [DOMElement] (https://developer.mozilla.org/en-US/docs/Web/API/Element) Before a funtion can be executed a DOMElement first need to be located
SELECT css(&amp;#34;#btn&amp;#34;) FROM http://www.delven.io/test/execute.html EVENTFLOW [ { &amp;#34;by-css&amp;#34; : &amp;#34;#btn&amp;#34;, &amp;#34;execute&amp;#34; : [&amp;#34;$.click()&amp;#34;] } ] Full JavaScript support : ECMAScript 6 Delven allows for low lever interaction with documents via JavaScript(ECMAScript 6+) scripts.</description>
    </item>
    
    <item>
      <title>Keypress Events</title>
      <link>/event-flow/keypress-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/event-flow/keypress-events/</guid>
      <description>[//] (http://www.testingdiaries.com/selenium-ide-keypress-events/) [//] (http://www.testingdiaries.com/selenium-ide-keypress-events/)
Simulating Keypress Events
Arguments Below is an exhaustive list of supported keyboard commands.
Navigation Keys  KEY_LEFT (Navigation Left) KEY_UP (Navigation Up) KEY_RIGHT (Navigation Right) KEY_DOWN (Navigation Down) KEY_PGUP / KEY_PAGE_UP (Page up) KEY_PGDN / KEY_PAGE_DOWN (Page down) KEY_END (End) KEY_HOME (Home)  Function Keys  KEY_F1 to KEY_12 (Function keys from F1 to F12)  Modifier Keys  KEY_ALT (Alt) KEY_CONTROL / KEY_CTRL (Ctrl) KEY_META / KEY_COMMAND (Command) KEY_SHIFT (Shift)  Num Pad Keys  KEY_NUMPAD0 / KEY_N0 to KEY_NUMPAD9 / KEY_N9 (Number keys from 1 to 9) KEY_ADD / KEY_NUM_PLUS (Plus) KEY_DECIMAL/ KEY_NUM_PERIOD (Period) KEY_DIVIDE/ KEY_NUM_DIVISION (Division) KEY_MULTIPLY/ KEY_NUM_MULTIPLY (Multiply) KEY_SEPARATOR/ KEY_SEP (Separator) KEY_SUBTRACT/ KEY_NUM_MINUS (Minus)  Misc.</description>
    </item>
    
    <item>
      <title>Path</title>
      <link>/api-reference/path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/path/</guid>
      <description>The path module provides utilities for working with file and directory paths.
Goal of this inerface is to be compatible with Node.js Path API
Compatibility objective : 100%
To use this module:
const path = require(&#39;path&#39;); path.extension(path)  path &amp;lt;string&amp;gt; Path of the file to check Returns: &amp;lt;string&amp;gt; extension  Get the the extension of the path, from the last occurrence of the .
path.extname(path) Alias for path.extension(path)
path.dirname(path)  path &amp;lt;string&amp;gt; Path of the file to check Returns: &amp;lt;string&amp;gt; directory name  Get the directory name of a path, similar to the Unix dirname command.</description>
    </item>
    
    <item>
      <title>Request API</title>
      <link>/api-reference/request/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/request/api/</guid>
      <description>request.create request.createStep(fn, options) Creates a step definition
   Name Spec Data Types Description     fn function The step function to call   options object Step options    timeout Timeout period before request is considered dead (default:none)    waitTimeout Wait timeout between requests (default:5000)    request.then(step, options) Add processing step to current navigation. Calling this method after the run have started will result in the step being inserted as next one in the queue</description>
    </item>
    
    <item>
      <title>Request Pipeline</title>
      <link>/api-reference/request/pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/api-reference/request/pipeline/</guid>
      <description>Request Pipeline Pipelines allow for chaing requests
const request = require(&#39;request&#39;).create(); const onRequestSent = function(request) { console.info(&amp;quot;Sending request : %s&amp;quot;, request); } const onRequestReceived = function (request, response) { console.info(&amp;quot;Receiving request &amp;quot;); } request.on(&#39;resource.requested&#39;, onRequestSent); request.on(&#39;resource.received&#39;, onRequestReceived); request.start().next(() =&amp;gt; { console.info(&amp;quot;Start **&amp;quot;); this.open(&#39;https://www.google.com/&#39;).next(() =&amp;gt; { // Evaluate function in the context of the loaded page this.evaluate(function () { console.info(&amp;quot;Document Title&amp;quot;); }); }); }); request.run(); </description>
    </item>
    
  </channel>
</rss>
